--alt_mac_mult DATAA_CLEAR="NONE" DATAA_CLOCK="NONE" DATAA_WIDTH=18 DATAB_CLEAR="NONE" DATAB_CLOCK="NONE" DATAB_WIDTH=10 MULT_CLEAR="NONE" MULT_CLOCK="NONE" MULT_INPUT_A_IS_CONSTANT="NO" MULT_INPUT_B_IS_CONSTANT="NO" MULT_PIPELINE=0 MULT_REPRESENTATION_A="UNSIGNED" MULT_REPRESENTATION_B="SIGNED" OUTPUT_CLEAR="NONE" OUTPUT_CLOCK="NONE" OUTPUT_WIDTH=28 SIGNA_CLEAR="NONE" SIGNA_CLOCK="NONE" SIGNB_CLEAR="NONE" SIGNB_CLOCK="NONE" dataa datab dataout signa signb(vcc) CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="MAX 10"
--VERSION_BEGIN 24.1 cbx_alt_mac_mult 2025:03:05:20:06:36:SC cbx_mgl 2025:03:05:20:07:01:SC  VERSION_END


-- Copyright (C) 2025  Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus Prime License Agreement,
--  the Altera IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Altera and sold by Altera or its authorized distributors.  Please
--  refer to the Altera Software License Subscription Agreements 
--  on the Quartus Prime software download page.


FUNCTION mult_8rn (dataa[18..0], datab[9..0])
RETURNS ( result[28..0]);

--synthesis_resources = lut 239 
SUBDESIGN mac_mult_2fg1
( 
	dataa[17..0]	:	input;
	datab[9..0]	:	input;
	dataout[27..0]	:	output;
	signa	:	input;
	signb	:	input;
) 
VARIABLE 
	mult1 : mult_8rn;
	const_node_signb	: NODE;
	tmp_dataout[27..0]	: WIRE;
	x_dataa[18..0]	: WIRE;
	x_datab[9..0]	: WIRE;
	x_output[27..0]	: WIRE;

BEGIN 
	mult1.dataa[] = x_dataa[];
	mult1.datab[] = x_datab[];
	dataout[] = tmp_dataout[];
	const_node_signb = signb;
	tmp_dataout[] = (x_output[] & (signa # (! signa)));
	x_dataa[] = ( GND, dataa[]);
	x_datab[] = ( datab[]);
	x_output[27..0] = mult1.result[27..0];
END;
--VALID FILE
